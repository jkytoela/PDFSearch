# MinIO settings and configurations that are common for all containers
x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2022-02-18T01-50-10Z
  command: server --address ":9000" --console-address ":9001" http://minio{1...4}/data{1...2}
  networks:
    - server-side
  expose:
    - 9000
    - 9001
  environment:
    MINIO_ROOT_USER: minio
    MINIO_ROOT_PASSWORD: minio123
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

services:
  # React front-end
  frontend:
    container_name: frontend
    build: frontend
    ports:
      - 3000:3000
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    restart: always
    networks:
      - client-side
    depends_on:
      - backend

  # Express.js backend
  backend:
    container_name: backend
    restart: always
    build: backend
    environment:
      - ADDRESS=0.0.0.0:8000
      - PG_DBNAME=postgres
      - PG_HOST=db
      - PG_USER=postgres
      - PG_PASSWORD=secret
    volumes:
      - ./backend:/usr/app
    # depends_on:
    #   - db
    networks:
      - client-side
      - server-side
    ports:
      - 8000:8000

  # Apache Tika Server
  tika:
    image:  apache/tika:1.28.1
    restart: on-failure
    networks:
      - client-side
      - server-side
    ports:
      - 9998:9998

  # Starts 4 containers running minio server instances.
  # Using nginx reverse proxy and load balancing, it can be accessed through port 9000.
  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    networks:
      - server-side
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 9000:9000
      - 9001:9001
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4

  db:
    container_name: db
    image: postgres:12-alpine
    restart: always
    environment:
      - POSTGRES_PASSWORD=secret
    networks:
      - server-side
    ports:
      - 5432:5432
    volumes:
      - db-data:/var/lib/postgresql/data

  redis:
    container_name: redis
    image: redis:alpine
    restart: always
    networks:
      - server-side
    expose:
      - 6379

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:7.16.1
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - 9200:9200
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - server-side
    expose:
      - 9200

  # kibana:
  #   container_name: kibana
  #   image: kibana:7.16.1
  #   ports:
  #     - 5601:5601
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - server-side

networks:
  client-side: {}
  server-side: {}

volumes:
  db-data: {}
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2: